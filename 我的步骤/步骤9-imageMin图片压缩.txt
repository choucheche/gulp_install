gulpfile.js写入

var gulp = require('gulp'),

//图片压缩插件集合
imagemin = require('gulp-imagemin'),
/*
img压缩插件
npm install gulp-imagemin --save-dev
*/
pngquant = require('imagemin-pngquant'),
/*
加强img压缩性能插件
npm install imagemin-pngquant --save-dev
*/
cache = require('gulp-cache'),
/*
减少压缩图片的内存消耗
npm install gulp-cache --save-dev
只压缩修改的图片。压缩图片时比较耗时，在很多情况下我们只修改了某些图片，
没有必要压缩所有图片，使用”gulp-cache”只压缩修改的图片，
没有修改的图片直接从缓存文件读取（C:\Users\Administrator\AppData\Local\Temp\gulp-cache）。
*/
//图片压缩插件集合结束

/*img图片压缩*/
gulp.task('imageMin', function () {
//优化图片
  gulp.src([app.srcPath+'/img/**/*.{png,jpg,gif,ico}'])
    .pipe(gulp.dest(app.buildPath+'/img'))
    .pipe(cache(imagemin({
    // cache( 减少压缩图片的内存消耗
      progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片
      //optimizationLevel: 5, //类型：Number  默认：3 取值范围：0-7（优化等级）
      //interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染
      //multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化
      svgoPlugins: [{removeViewBox: false}], //不要移除svg的viewbox属性
      use: [pngquant()] //使用pngquant深度压缩png图片的imagemin插件
    })))
    .pipe(gulp.dest(app.distPath+'/img'))
    .pipe(browserSync.reload({stream:true}));
    //执行无需F5自动刷新页面
});
/*img图片压缩结束*/

gulp.task('serve', function() {
    gulp.watch(app.srcPath+'/img/**/*', ['imageMin']);
});
